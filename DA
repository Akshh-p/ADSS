import java.util.*;

class DijkstrasAlgorithm {
    static class Edge {
        int destination, weight;

        Edge(int destination, int weight) {
            this.destination = destination;
            this.weight = weight;
        }
    }

    static class Graph {
        int vertices;
        List<Edge>[] adjacencyList;

        Graph(int vertices) {
            this.vertices = vertices;
            adjacencyList = new LinkedList[vertices];
            for (int i = 0; i < vertices; i++) {
                adjacencyList[i] = new LinkedList<>();
            }
        }

        void addEdge(int source, int destination, int weight) {
            adjacencyList[source].add(new Edge(destination, weight));
            adjacencyList[destination].add(new Edge(source, weight)); // For undirected graph
        }

        void dijkstra(int startVertex) {
            int[] distances = new int[vertices];
            boolean[] visited = new boolean[vertices];
            PriorityQueue<Edge> pq = new PriorityQueue<>(Comparator.comparingInt(e -> e.weight));

            Arrays.fill(distances, Integer.MAX_VALUE);
            distances[startVertex] = 0;
            pq.add(new Edge(startVertex, 0));

            while (!pq.isEmpty()) {
                int currentVertex = pq.poll().destination;

                if (visited[currentVertex]) continue;
                visited[currentVertex] = true;

                for (Edge edge : adjacencyList[currentVertex]) {
                    int neighbor = edge.destination;
                    int weight = edge.weight;

                    if (!visited[neighbor] && distances[currentVertex] + weight < distances[neighbor]) {
                        distances[neighbor] = distances[currentVertex] + weight;
                        pq.add(new Edge(neighbor, distances[neighbor]));
                    }
                }
            }

            // Print the shortest distances
            System.out.println("Shortest distances from vertex " + startVertex + ":");
            for (int i = 0; i < vertices; i++) {
                System.out.println("To vertex " + i + " -> Distance: " + distances[i]);
            }
        }
    }

    public static void main(String[] args) {
        Graph graph = new Graph(6);

        // Add edges: graph.addEdge(source, destination, weight)
        graph.addEdge(0, 1, 4);
        graph.addEdge(0, 2, 2);
        graph.addEdge(1, 2, 1);
        graph.addEdge(1, 3, 5);
        graph.addEdge(2, 3, 8);
        graph.addEdge(2, 4, 10);
        graph.addEdge(3, 4, 2);
        graph.addEdge(3, 5, 6);
        graph.addEdge(4, 5, 3);

        // Start Dijkstra's algorithm from vertex 0
        graph.dijkstra(0);
    }
}
