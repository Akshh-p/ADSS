import java.util.Stack;

public class Main {

    // Method to get the precedence of operators
    public static int precedence(char ch) {
        if (ch == '+' || ch == '-') {
            return 1;
        } else if (ch == '*' || ch == '/') {
            return 2;
        }
        return 0;
    }

    // Method to convert infix to postfix
    public static String infixToPostfix(String infix) {
        Stack<Character> stack = new Stack<>();  // Stack to hold operators
        StringBuilder postfix = new StringBuilder();  // StringBuilder to build the postfix expression

        for (int i = 0; i < infix.length(); i++) {
            char current = infix.charAt(i);

            // If current character is an operand (alphabet or number), add it to the postfix expression
            if (Character.isLetterOrDigit(current)) {
                postfix.append(current);
            }
            // If current character is '(', push it to the stack
            else if (current == '(') {
                stack.push(current);
            }
            // If current character is ')', pop from the stack to the postfix expression until '(' is found
            else if (current == ')') {
                while (!stack.isEmpty() && stack.peek() != '(') {
                    postfix.append(stack.pop());
                }
                stack.pop();  // Pop '(' from the stack
            }
            // If current character is an operator
            else {
                while (!stack.isEmpty() && precedence(stack.peek()) >= precedence(current)) {
                    postfix.append(stack.pop());
                }
                stack.push(current);  // Push the current operator to the stack
            }

            // Display the stack and postfix at each step (for debugging purposes)
            System.out.println("Stack: " + stack);
            System.out.println("Postfix: " + postfix);
        }

        // Pop any remaining operators from the stack and append them to the postfix expression
        while (!stack.isEmpty()) {
            postfix.append(stack.pop());
        }

        return postfix.toString();
    }

    public static void main(String[] args) {
        String infix = "a-b*c-d/e+f";  // Example infix expression
        System.out.println("Infix Expression: " + infix);
        String postfix = infixToPostfix(infix);
        System.out.println("Postfix Expression: " + postfix);  // Output the final postfix expression
    }
}
