import java.util.*;

class Main {
    static class Edge implements Comparable<Edge> {
        int source, destination, weight;

        Edge(int source, int destination, int weight) {
            this.source = source;
            this.destination = destination;
            this.weight = weight;
        }

        @Override
        public int compareTo(Edge o) {
            return this.weight - o.weight;
        }
    }

    static class Graph {
        int vertices;
        List<Edge> edges;

        Graph(int vertices) {
            this.vertices = vertices;
            edges = new ArrayList<>();
        }

        void addEdge(int source, int destination, int weight) {
            edges.add(new Edge(source, destination, weight));
        }

        void kruskalMST() {
            Collections.sort(edges);
            int[] parent = new int[vertices];
            for (int i = 0; i < vertices; i++) {
                parent[i] = i; // Initially, each vertex is its own parent
            }

            List<Edge> mst = new ArrayList<>();
            int totalCost = 0;

            for (Edge edge : edges) {
                int rootSource = find(parent, edge.source);
                int rootDestination = find(parent, edge.destination);

                // If including this edge does not create a cycle
                if (rootSource != rootDestination) {
                    mst.add(edge);
                    totalCost += edge.weight;
                    union(parent, rootSource, rootDestination);
                }
            }

            // Print the MST and its total cost
            System.out.println("Minimum Spanning Tree Edges:");
            for (Edge edge : mst) {
                System.out.println("Edge: " + edge.source + " - " + edge.destination + " | Weight: " + edge.weight);
            }
            System.out.println("Total Cost of MST: " + totalCost);
        }

        int find(int[] parent, int vertex) {
            if (parent[vertex] != vertex) {
                parent[vertex] = find(parent, parent[vertex]); // Path compression
            }
            return parent[vertex];
        }

        void union(int[] parent, int root1, int root2) {
            parent[root1] = root2;
        }
    }

    public static void main(String[] args) {
        Graph graph = new Graph(6);

        // Add edges: graph.addEdge(source, destination, weight)
        graph.addEdge(0, 1, 4);
        graph.addEdge(0, 2, 3);
        graph.addEdge(1, 2, 1);
        graph.addEdge(1, 3, 2);
        graph.addEdge(2, 3, 4);
        graph.addEdge(3, 4, 2);
        graph.addEdge(4, 5, 6);

        graph.kruskalMST();
    }
}
